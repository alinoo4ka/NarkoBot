import asyncio
import random
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from datetime import datetime

API_TOKEN = '7865025693:AAE6RFJAgCQpUxYljnhagEca6W5lKZFKAv8'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
DB_NAME = 'planet_explorer.db'

def init_db():
  conn = sqlite3.connect(DB_NAME)
  cursor = conn.cursor()
  cursor.execute('''CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, nickname TEXT, discovered_planets INTEGER DEFAULT 0, space_artifacts TEXT DEFAULT '', planet_names TEXT DEFAULT '', start_time TEXT)''')
  conn.commit()
  conn.close()
init_db()

def get_user_data(user_id):
  conn = sqlite3.connect(DB_NAME)
  cursor = conn.cursor()
  cursor.execute("SELECT nickname, discovered_planets, space_artifacts, planet_names, start_time FROM users WHERE user_id = ?", (user_id,))
  data = cursor.fetchone()
  conn.close()
  return data

def update_user_data(user_id, nickname, discovered_planets, space_artifacts, planet_names, start_time):
  conn = sqlite3.connect(DB_NAME)
  cursor = conn.cursor()
  cursor.execute("INSERT OR REPLACE INTO users (user_id, nickname, discovered_planets, space_artifacts, planet_names, start_time) VALUES (?, ?, ?, ?, ?, ?)",
          (user_id, nickname, discovered_planets, space_artifacts, planet_names, start_time))
  conn.commit()
  conn.close()

@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
  user_id = message.from_user.id
  start_time = datetime.now().isoformat()
  update_user_data(user_id, None, 0, '', '', start_time)
  await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ª—é–±–∏—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∫–æ—Å–º–æ—Å. üöÄ\n\n–ù–∞—á–Ω–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /–≥–Ω–∏–∫ [–Ω–∏–∫–Ω–µ–π–º]")

@dp.message_handler(commands=['cosmo', '–∫–æ—Å–º–æ—Å'])
async def show_discoveries(message: types.Message):
  user_id = message.from_user.id
  user_data = get_user_data(user_id)
  if user_data:
    planet_names_list = [p.strip() for p in user_data[3].split(',') if p.strip()] if user_data[3] else []
    response = f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã:\n{('\n'.join(planet_names_list) or '–ï—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã')}"
    await message.answer(response)
  else:
    await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message_handler(commands=['profile', '–ø—Ä–æ—Ñ', '–ø—Ä–æ—Ñ–∏–ª—å'])
async def show_profile(message: types.Message):
  user_id = message.from_user.id
  user_data = get_user_data(user_id)
  if user_data:
    nickname, discovered_planets, space_artifacts, planet_names_str, start_time_str = user_data
    planet_names_list = [p.strip() for p in planet_names_str.split(',') if p.strip()] if planet_names_str else []
    start_time_obj = datetime.fromisoformat(start_time_str)
    response = f"{nickname}, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n" if nickname else "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
    response += f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–ª–∞–Ω–µ—Ç: {discovered_planets}\n"
    response += f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã:\n{('\n'.join(planet_names_list) or '–ï—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã')}\n"
    response += f"–ù–∞–π–¥–µ–Ω–æ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π: {space_artifacts.count('–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –¥—Ä–µ–≤–Ω–µ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏')}\n"
    response += f"–ù–∞–π–¥–µ–Ω–æ –æ—Å–∫–æ–ª–∫–æ–≤ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞: {space_artifacts.count('–æ—Å–∫–æ–ª–æ–∫ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ —Å —Ä–µ–¥–∫–∏–º–∏ –º–∏–Ω–µ—Ä–∞–ª–∞–º–∏')}\n"
    response += f"–í–∞—à –∏–≥—Ä–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {calculate_level(discovered_planets)}\n"
    response += f"–ò–≥—Ä–∞–µ—Ç–µ –≤ –±–æ—Ç–∞ —Å: {start_time_obj.strftime('%d.%m.%Y %H:%M')}"
    await message.answer(response)
  else:
    await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message_handler(commands=['planet', '–ø–ª–∞–Ω–µ—Ç–∞'])
async def describe_planet(message: types.Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /–ø–ª–∞–Ω–µ—Ç–∞")
        return
    planet_name = args[1]
    planet_descriptions = {
        "–ê–ª—å—Ç–∞-42": "–ü–ª–∞–Ω–µ—Ç–∞ –ê–ª—å—Ç–∞-42, –ø–æ–∫—Ä—ã—Ç–∞—è –ª–µ—Å–∞–º–∏ –∏ –æ–∑–µ—Ä–∞–º–∏, —Å–ª–∞–≤–∏—Ç—Å—è —Å–≤–æ–µ–π –±–æ–≥–∞—Ç–æ–π —Ñ–ª–æ—Ä–æ–π –∏ —Ñ–∞—É–Ω–æ–π.",
        "–ë–µ—Ç–∞-77": "–ë–µ—Ç–∞-77 - —ç—Ç–æ –≥–∞–∑–æ–≤—ã–π –≥–∏–≥–∞–Ω—Ç, –≤—Ä–∞—â–∞—é—â–∏–π—Å—è –≤–æ–∫—Ä—É–≥ –¥–≤–æ–π–Ω–æ–π –∑–≤–µ–∑–¥—ã.  –ï–≥–æ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –º–µ—Ç–∞–Ω–∞ –∏ –∞–º–º–∏–∞–∫–∞.",
        "–ì–∞–º–º–∞-13": "–ì–∞–º–º–∞-13 - —ç—Ç–æ —Å–∫–∞–ª–∏—Å—Ç–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —Å –≤—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é,  –æ–∫—Ä—É–∂–µ–Ω–Ω–∞—è –∫–æ–ª—å—Ü–∞–º–∏ –∏–∑ –ø—ã–ª–∏ –∏ –≥–∞–∑–∞.",
        "–î–µ–ª—å—Ç–∞-99": "–î–µ–ª—å—Ç–∞-99 - —ç—Ç–æ –Ω–µ–±–æ–ª—å—à–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —Å –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–π –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–µ–π,  –ø–æ–∫—Ä—ã—Ç–∞—è –∑–∞—Å—Ç—ã–≤—à–µ–π –ª–∞–≤–æ–π.",
        "–≠–ø—Å–∏–ª–æ–Ω-20": "–≠–ø—Å–∏–ª–æ–Ω-20 - —ç—Ç–æ –ø–ª–∞–Ω–µ—Ç–∞,  —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —á–∏—Å—Ç–æ–≥–æ –ª—å–¥–∞.  –û–Ω–∞ –≤—Ä–∞—â–∞–µ—Ç—Å—è –≤–æ–∫—Ä—É–≥ –∫—Ä–∞—Å–Ω–æ–≥–æ –∫–∞—Ä–ª–∏–∫–∞.",
        "–ó–∏-42": "–ó–∏-42 - —ç—Ç–æ –ø–ª–∞–Ω–µ—Ç–∞,  –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—ã –¥—Ä–µ–≤–Ω–µ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏.",
        "–≠—Ç–∞-77": "–≠—Ç–∞-77 - —ç—Ç–æ –≥–∞–∑–æ–≤—ã–π –≥–∏–≥–∞–Ω—Ç,  –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–≤–æ–∏–º–∏ –æ–≥—Ä–æ–º–Ω—ã–º–∏ —à—Ç–æ—Ä–º–∞–º–∏.",
        "–¢–µ—Ç–∞-13": "–¢–µ—Ç–∞-13 - —ç—Ç–æ –ø–ª–∞–Ω–µ—Ç–∞,  –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä–æ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–æ–¥–∞ –≤ –∂–∏–¥–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.", 
        "–ô–æ—Ç–∞-99": "–ô–æ—Ç–∞-99 - —ç—Ç–æ –ø–ª–∞–Ω–µ—Ç–∞,  –ø–æ–∫—Ä—ã—Ç–∞—è –∫—Ä–∞—Ç–µ—Ä–∞–º–∏ –æ—Ç –º–µ—Ç–µ–æ—Ä–∏—Ç–æ–≤."
    }
    description = planet_descriptions.get(planet_name)
    if description:
        await message.answer(description)
    else:
        await message.answer("–ü–ª–∞–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! üïµÔ∏è‚Äç‚ôÄÔ∏è")

@dp.message_handler(regexp=r"^–ò—Å–∫–∞—Ç—å –ø–ª–∞–Ω–µ—Ç—É$")
async def find_planet(message: types.Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    current_time = datetime.now().timestamp()
    if user_data:
        last_planet_search_time = datetime.fromisoformat(user_data[-1]).timestamp()
        time_since_last_search = current_time - last_planet_search_time
    if time_since_last_search < 1800:
      await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–∏—Å–∫–æ–º –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ 30 –º–∏–Ω—É—Ç.")
      return
      messages = [
        "–û—Ç–ª–∏—á–Ω–æ! –í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–æ–≤—É—é –ø–ª–∞–Ω–µ—Ç—É –≤ –≥–∞–ª–∞–∫—Ç–∏–∫–µ –ê–Ω–¥—Ä–æ–º–µ–¥—ã! üéâ\n–ü–ª–∞–Ω–µ—Ç–∞: {planet_name}",
        "–ê–•–£–ï–¢–¨! –í–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Å–º–æ—Å–∞ –≤—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ —Ç—Ä–∏ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–∞!\n+1 –Ω–æ–≤–∞—è –ø–ª–∞–Ω–µ—Ç–∞\n–ü–ª–∞–Ω–µ—Ç–∞: {planet_name}\n+–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –¥—Ä–µ–≤–Ω–µ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏\n+–æ—Å–∫–æ–ª–æ–∫ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ —Å —Ä–µ–¥–∫–∏–º–∏ –º–∏–Ω–µ—Ä–∞–ª–∞–º–∏",
        "–£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º! –í—ã –Ω–∞—à–ª–∏ –ø–ª–∞–Ω–µ—Ç—É, –ø–æ—Ö–æ–∂—É—é –Ω–∞ –ó–µ–º–ª—é, –≤ —Å–æ–∑–≤–µ–∑–¥–∏–∏ –û—Ä–∏–æ–Ω–∞! üåé\n–ü–ª–∞–Ω–µ—Ç–∞: {planet_name}",
        "–û–≥–æ! –í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø–ª–∞–Ω–µ—Ç—É, –≤—Ä–∞—â–∞—é—â—É—é—Å—è –≤–æ–∫—Ä—É–≥ –¥–≤–æ–π–Ω–æ–π –∑–≤–µ–∑–¥—ã! ü™ê\n–ü–ª–∞–Ω–µ—Ç–∞: {planet_name}",
        "–í–∞—à–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏–Ω–µ—Å–ª–∏ –ø–ª–æ–¥—ã! –í—ã –Ω–∞—à–ª–∏ –Ω–æ–≤—É—é –ø–ª–∞–Ω–µ—Ç—É —Å –∫–æ–ª—å—Ü–∞–º–∏, –∫–∞–∫ —É –°–∞—Ç—É—Ä–Ω–∞! ü™ê\n–ü–ª–∞–Ω–µ—Ç–∞: {planet_name}"
      ]
      found_message = random.choice(messages).format(planet_name=generate_planet_name())
      await message.answer(found_message)
      update_user_discoveries(user_id, found_message)
    else:
      await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message_handler(commands=['lvl', '—É—Ä–æ–≤–µ–Ω—å'])
async def show_level(message: types.Message):
  user_id = message.from_user.id
  user_data = get_user_data(user_id)
  if user_data:
    discovered_planets = user_data[1]
    current_level = calculate_level(discovered_planets)
    required_planets = level_prices[current_level - 1] if current_level < 5 else 0
    response = f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {current_level}\n"
    response += f"–ß—Ç–æ–±—ã –ø—Ä–æ–∫–∞—á–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
    response += f"–ü–ª–∞–Ω–µ—Ç—ã: {discovered_planets}/{required_planets}"
    if current_level < 5:
      await message.answer(response, reply_markup=types.ReplyKeyboardMarkup(keyboard=[[types.KeyboardButton(text="–ü–æ–≤—ã—Å–∏—Ç—å")]]))
    else:
      await message.answer(response)
  else:
    await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
      

@dp.message_handler(lambda message: message.text == "–ü–æ–≤—ã—Å–∏—Ç—å")
async def process_callback_upgrade_level(message: types.Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if user_data:
        discovered_planets = user_data[1]
        current_level = calculate_level(discovered_planets)
        required_planets = level_prices[current_level - 1] if current_level < 5 else 0
    if discovered_planets >= required_planets:
        await message.answer("–í–∞—à —É—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—à–µ–Ω!")
        update_user_data(user_id, *user_data[:1], discovered_planets - required_planets, *user_data[3:])
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–ª–∞–Ω–µ—Ç!")
  else:
await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

def update_user_discoveries(user_id, found_message):
    user_data = get_user_data(user_id)
    if user_data:
        discovered_planets, space_artifacts_str, planet_names_str = user_data[1:4]
    if "–Ω–æ–≤—É—é –ø–ª–∞–Ω–µ—Ç—É" in found_message:
        discovered_planets += 1
      try:
        planet_name = found_message.split("–ü–ª–∞–Ω–µ—Ç–∞: ")[1].strip()
        planet_names_str += ',' + planet_name if planet_names_str else planet_name
      except IndexError:
        print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–ª–∞–Ω–µ—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        if "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å" in found_message:
            space_artifacts_str += ",–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –¥—Ä–µ–≤–Ω–µ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏"
        if "–æ—Å–∫–æ–ª–æ–∫ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞" in found_message:
            space_artifacts_str += ",–æ—Å–∫–æ–ª–æ–∫ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ —Å —Ä–µ–¥–∫–∏–º–∏ –º–∏–Ω–µ—Ä–∞–ª–∞–º–∏"
          update_user_data(user_id, *user_data[:1], discovered_planets, space_artifacts_str, planet_names_str, user_data[-1])

def generate_planet_name():
    prefixes = ["–ê–ª—å—Ç–∞", "–ë–µ—Ç–∞", "–ì–∞–º–º–∞", "–î–µ–ª—å—Ç–∞", "–≠–ø—Å–∏–ª–æ–Ω", "–ó–∏", "–≠—Ç–∞", "–¢–µ—Ç–∞", "–ô–æ—Ç–∞", "–ö–∞–ø–ø–∞"]
    suffixes = ["-42", "-77", "-13", "-99", "-20"]
    return random.choice(prefixes) + random.choice(suffixes)

def calculate_level(planets_discovered):
    level_prices = [10, 30, 90, 270]
    if planets_discovered < 5:
        return 1
    elif planets_discovered < 10:
        return 2
    elif planets_discovered < 20:
        return 3
    else:
        return 4

async def main():
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())
